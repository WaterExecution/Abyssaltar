#!/usr/bin/env python3
import sys
import re
import os
import subprocess
import threading
import time
import argparse
import string
import random
import requests
import urllib3
from termcolor import colored
from bs4 import BeautifulSoup, Comment
from shutil import which

class reconbot:

    def __init__(self, args, IP):
        urllib3.disable_warnings()
        self.defaultvalues = {
            "weblist" : "/usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt",
            "userlist" : "/usr/share/seclists/Usernames/top-usernames-shortlist.txt",
            "passlist" : "/usr/share/seclists/Passwords/darkweb2017-top100.txt"
        }
        self.scriptvars = {
                "host_timeout" : "30m",
                "user_agent" : "Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0"
                }
        self.which_checklist = [
            "hydra",
            "gobuster",
            "nikto",
            "rpcinfo",
            "enum4linux",
            "smbmap",
            "snmp-check",
            "onesixtyone",
            "snmpwalk"
        ]
        self.args = args
        self.IP = IP
        self.scriptthreads = {}
        self.checkroot()
        self.checkIP()
        self.checkargs()
        self.services = {} # format = protocl_port : service
        self.runningscripts = []
        self.mapped_services = {
            "telnet": ["hydra_telnet", "nmap_nse_telnet"],
            "ftp": ['nmap_nse_ftp', "hydra_ftp"],
            "ssh" : ["hydra_ssh", "nmap_nse_ssh"],
            "http" : ['gobuster', 'nikto', 'nmap_nse_http'],
            "https" : ['gobuster_https', 'nikto_https', 'nmap_nse_http'],
            "ssl/http" : ['gobuster_https', 'nikto_https', 'nmap_nse_http'],
            "msrpc" : ['rpcinfo', 'nmap_nse_rpc', 'nmap_nse_msrpc'],
            "netbios" : ['enum4linux', 'nmap_nse_smb', 'nmap_nse_nbstat', 'smbmap'],
            "microsoft-ds" : ['enum4linux', 'nmap_nse_nbstat', 'nmap_nse_smb', 'smbmap', "hydra_smb"],
            "snmp" : ['snmp-check', 'onesixtyone', 'snmpwalk', 'nmap_nse_snmp'],
            "smtp" : ['nmap_nse_smtp'],
            "ntp" : ['nmap_nse_ntp'],
            "dns" : ['nmap_nse_dns'],
            "imap": ['nmap_nse_imap'],
            "ldap": ['nmap_nse_ldap'],
            "mongodb": ['nmap_nse_mongodb'],
            "ms-sql": ['nmap_nse_ms-sql'],
            "irc": ['nmap_nse_irc'],
            "mysql": ['nmap_nse_mysql', "hydra_mysql"],
            "ms-wbt-server": ["hydra_rdp"]
        }
        self.mapped_commands = {
            "gobuster" : f"gobuster dir -u http://__IP__:__PORT__/ -a '{self.scriptvars['user_agent']}' -s '200,204,301,302,307,403,500' -x 'txt,html,php,asp,aspx,jsp' -w {self.WEBLIST}",
            "gobuster_https" : f"gobuster dir -u https://__IP__:__PORT__/ -a '{self.scriptvars['user_agent']}' -s '200,204,301,302,307,403,500' -x 'txt,html,php,asp,aspx,jsp' -w {self.WEBLIST} -k",
            "nikto" : "nikto -ask=no --host http://__IP__:__PORT__/",
            "nikto_https" : "nikto -ask=no --host https://__IP__:__PORT__/",
            "enum4linux" : "enum4linux -a __IP__ ",
            "rpcinfo" : "rpcinfo __IP__ ",
            "snmp-check" : "snmp-check __IP__",
            "onesixtyone" : "onesixtyone __IP__",
            "snmpwalk" : "snmpwalk __IP__",
            "smbmap" : "smbmap -H __IP__ -P __PORT__",
            "nmap_nse_telnet": "nmap -Pn -p __PORT__ --host-timeout " + self.scriptvars['host_timeout'] + " --script \"telnet* and not telnet-brute*\" __IP__",
            "nmap_nse_ssh": "nmap -Pn -p __PORT__ --host-timeout " + self.scriptvars['host_timeout'] + " --script \"ssh* and not ssh-brute*\" __IP__",
            "nmap_nse_nbstat" : "nmap -Pn -p __PORT__ --host-timeout " + self.scriptvars['host_timeout'] + " --script \"nbstat*\" __IP__",
            "nmap_nse_smb" : "nmap -Pn -p __PORT__ --host-timeout " + self.scriptvars['host_timeout'] + " --script \"smb-enum*\" __IP__",
            "nmap_nse_rpc" : "nmap -Pn -p __PORT__ --host-timeout " + self.scriptvars['host_timeout'] + " --script \"rpc* and not rpcap*\" __IP__",
            "nmap_nse_snmp": "nmap -Pn -p __PORT__ --host-timeout " + self.scriptvars['host_timeout'] + " --script \"snmp*\" __IP__",
            "nmap_nse_smtp": "nmap -Pn -p __PORT__ --host-timeout " + self.scriptvars['host_timeout'] + " --script \"smtp*\" __IP__",
            "nmap_nse_http": "nmap -Pn -p __PORT__ --host-timeout " + self.scriptvars['host_timeout'] + " --script \"http*\" __IP__",
            "nmap_nse_ntp": "nmap -Pn -p __PORT__ --host-timeout " + self.scriptvars['host_timeout'] + " --script \"ntp*\" __IP__",
            "nmap_nse_dns": "nmap -Pn -p __PORT__ --host-timeout " + self.scriptvars['host_timeout'] + " --script \"dns*\" __IP__",
            "nmap_nse_ftp": "nmap -Pn -p __PORT__ --host-timeout " + self.scriptvars['host_timeout'] + " --script \"ftp* and not ftp-brute*\" __IP__",
            "nmap_nse_imap": "nmap -Pn -p __PORT__ --host-timeout " + self.scriptvars['host_timeout'] + " --script \"imap*\" __IP__",
            "nmap_nse_ldap": "nmap -Pn -p __PORT__ --host-timeout " + self.scriptvars['host_timeout'] + " --script \"ldap*\" __IP__",
            "nmap_nse_irc": "nmap -Pn -p __PORT__ --host-timeout " + self.scriptvars['host_timeout'] + " --script \"irc*\" __IP__",
            "nmap_nse_mongodb": "nmap -Pn -p __PORT__ --host-timeout " + self.scriptvars['host_timeout'] + " --script \"mongodb*\" __IP__",
            "nmap_nse_ms-sql": "nmap -Pn -p __PORT__ --host-timeout " + self.scriptvars['host_timeout'] + " --script \"ms-sql*\" __IP__",
            "nmap_nse_mysql": "nmap -Pn -p __PORT__ --host-timeout " + self.scriptvars['host_timeout'] + " --script \"mysql* and not mysql-brute*\" __IP__",
            "nmap_nse_msrpc": "nmap -Pn -p __PORT__ --host-timeout " + self.scriptvars['host_timeout'] + " --script \"msrpc*\" __IP__",
            "nmap_nse_dns": "nmap -Pn -p __PORT__ --host-timeout " + self.scriptvars['host_timeout'] + " --script \"dns*\" __IP__",
            "nmap_nse_oracle": "nmap -Pn -p __PORT__ --host-timeout " + self.scriptvars['host_timeout'] + " --script \"oracle*\" __IP__",

            # hydra will attempt to bruteforce about 1700 combinations (17 usernames with 100 passwords)
            "hydra_ftp": f"hydra -s __PORT__ -L {self.USERLIST} -P {self.PASSLIST} ftp://__IP__",
            "hydra_ssh": f"hydra -s __PORT__ -L {self.USERLIST} -P {self.PASSLIST} ssh://__IP__",
            "hydra_smb": f"hydra -s __PORT__ -L {self.USERLIST} -P {self.PASSLIST} smb://__IP__",
            "hydra_mysql": f"hydra -s __PORT__ -L {self.USERLIST} -P {self.PASSLIST} mysql://__IP__",
            "hydra_telnet": f"hydra -s __PORT__ -L {self.USERLIST} -P {self.PASSLIST} telnet://__IP__",
            "hydra_rdp": f"hydra -s __PORT__ -L {self.USERLIST} -P {self.PASSLIST} rdp://__IP__"
        }
        self.runonce_commands = [
            "enum4linux",
            "onesixtyone",
            "snmpwalk",
            "smtp-user-enum",
            "rpcinfo"
        ]
        self.blacklist_services = {
                "nikto" : ["https", "ssl/http"],
                "gobuster" : ["https", "ssl/http"]
        }
        self.processor_scripts = [
            "hydra",
            "gobuster"
        ]
        self.process_list = {
            "hydra" : self.processor_hydra,
            "gobuster" : self.processor_gobuster
        }
        self.detail_list = {
            "hydra" : "Credentials",
            "gobuster" : "Paths"
        }
        self.processor_stopcodes = []
        self.reconbot_info = {
        }

    def run(self):
        scanning_thread = threading.Thread(target=self.initial)
        scanning_thread.daemon = True
        scanning_thread.start()

        time.sleep(3)
        tcounter = 0  # The clock starts tickin
        while True:
            tcounter += 1
            counter = 0
            alivescripts = []
            for script in self.scriptthreads:
                if (self.scriptthreads[script].is_alive()):
                    counter += 1
                    alivescripts.append(script)
            if counter == 0:
                self.bprint(
                    colored('ReconBot finished scanning ', 'green', attrs=['bold']) + colored(self.TARGET + '','red',attrs=['bold']))
                self.shutdown()
                break
            if (tcounter % 180 == 0) and (tcounter != 0):
                msg = ""
                msg += colored(f"-"*100, 'red') + '\n'
                for info_item in self.reconbot_info:
                    if len(self.reconbot_info[info_item]) > 0:
                        msg += colored(f"{info_item}\n", 'red' , attrs=['bold'])
                        for item in sorted(self.reconbot_info[info_item]):
                            msg += colored(f"\t{item}\n", 'green', attrs=['bold'])
                msg += colored(f"\n{counter}", 'red', attrs=['bold']) + colored(' scripts still running\n', 'green',attrs=['bold'])
                for scr in alivescripts:
                    msg += '\t' + colored(scr, 'red', attrs=['bold']) + '\n'
                msg += '\n' + colored(f"-" * 100, 'red')
                self.bprint(msg)
            time.sleep(1)

    def bprint(self, text):
        print(text)
        self.logfile = open(f"{self.TARGET}/reconbot_output.txt", "a+")
        self.logfile.write(text + '\n')
        self.logfile.close()

    def bot_print(self, line, color, icon):
        text = ""
        text += colored('[', 'white', attrs=['bold']) + colored(icon, color, attrs=['bold']) + colored('] ', 'white', attrs=['bold'])
        text += colored(line, color)
        self.bprint(text)

    def bot_print_alert(self, line): # print a colored line
        self.bot_print(line, 'red', '!')

    def bot_print_process(self, line): # print a colored line
        self.bot_print(line, 'green', '+')

    def bot_print_done(self, line): # print a colored line
        self.bot_print(line, 'yellow', '+')

    def bot_print_finding(self, info):
        text = ""
        text += colored('[', 'white', attrs=['bold']) + colored('i', 'green', attrs=['bold']) + colored('] ', 'white', attrs=['bold'])
        text += info
        self.bprint(text)

    def bot_startline(self):
        self.bprint(colored('-'*100, 'grey', attrs=['bold']))

    def bot_endline(self):
        self.bprint(colored('-' * 100, 'grey', attrs=['bold']))

    def random(self, length):
        return ''.join(random.choice(string.ascii_lowercase) for i in range(length))

    def checkroot(self):
        if os.geteuid() != 0:
            text = colored('[', 'white', attrs=['bold']) + colored('!', 'red', attrs=['bold']) + colored('] ', 'white',attrs=['bold']) + colored("You need to be root to run this script!", 'red')
            print(text)
            sys.exit()

    def checkIP(self):
        if not re.search('^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$', self.IP):
            self.printUsage()
        else:
            self.TARGET = self.IP
            self.createDir()
        self.printHeader()

    def checkargs(self): # Check the arguments given
        if self.args.ports != None:
            self.PORTS = self.args.ports.split(',')
            try:
                for i in self.PORTS:
                    if len(i) == 0:
                        raise Exception
                    else:
                        if type(int(i)) != int:
                            raise Exception
                self.PORTS = self.args.ports
                self.bot_print_done(f'Found custom supplied ports: {self.PORTS}')
            except:
                self.bot_print_alert("ERROR: User supplied ports have been formatted wrong, switching to full recon mode\n")
                time.sleep(3)
                self.PORTS = False
        else:
            self.PORTS = False

        if self.args.weblist != None:
            try:
                self.WEBLIST = open(self.args.weblist)
                self.WEBLIST = self.args.weblist
                self.bot_print_done(f'Found custom supplied weblist: {self.WEBLIST}')
            except:
                self.bot_print_alert(f"ERROR: Web wordlist specified could not be opened, switching to default wordlist ({self.defaultvalues['weblist']})\n")
                time.sleep(3)
                self.WEBLIST = self.defaultvalues['weblist']
        else:
            self.WEBLIST = self.defaultvalues['weblist']

        if self.args.userlist != None:
            try:
                self.USERLIST = open(self.args.userlist)
                self.USERLIST = self.args.userlist
                self.bot_print_done(f'Found custom supplied userlist: {self.USERLIST}')
            except:
                self.bot_print_alert(f"ERROR: Username wordlist specified could not be opened, switching to default wordlist ({self.defaultvalues['userlist']})\n")
                time.sleep(3)
                self.USERLIST = self.defaultvalues['userlist']
        else:
            self.USERLIST = self.defaultvalues['userlist']

        if self.args.passlist != None:
            try:
                self.PASSLIST = open(self.args.passlist)
                self.PASSLIST = self.args.passlist
                self.bot_print_done(f'Found custom supplied passlist: {self.PASSLIST}')
            except:
                self.bot_print_alert(f"ERROR: Password wordlist specified could not be opened, switching to default wordlist ({self.defaultvalues['passlist']})\n")
                time.sleep(3)
                self.PASSLIST = self.defaultvalues['passlist']
        else:
            self.PASSLIST = self.defaultvalues['passlist']


        self.NMAPONLY = self.args.nmaponly
        if self.NMAPONLY:
            self.bot_print_done(f'Found nmaponly flag, only scanning with nmap')

        self.QUICK = self.args.quick
        if self.QUICK:
            self.bot_print_done(f'Found quick flag, only scanning quick ports')

        self.BRUTEONLY = self.args.bruteonly
        if self.BRUTEONLY:
            self.bot_print_done(f'Found bruteonly flag, only using hydra scripts')

        self.VERBOSE = self.args.verbose
        if self.VERBOSE:
            self.bot_print_done(f'Found verbose flag, dumping more info in the reconbot output')

    def printUsage(self): # Print some basic usage info
        usagetext = ""
        usagetext += colored('Use reconbot -h to see how to use this script', 'red', attrs=['bold'])
        print(usagetext)
        sys.exit()

    def printHeader(self):
        header = "\n"
        header += colored('-'*100, 'green', attrs=['bold'])
        header += colored('\nReconBot - Automatic Reconnaissance Bot\n', 'red', attrs=['bold'])
        header += colored('-'*100, 'green', attrs=['bold'])
        header += "\n"
        self.bprint(header)
        self.bot_print_done(f"Output saved to: {self.TARGET}/reconbot_output.txt")

    def createDir(self):
        self.PATH = f'{self.TARGET}/recon'
        if not os.path.exists(self.PATH):
            os.makedirs(self.PATH)
            os.chmod(self.TARGET, 0o755)
            os.chmod(self.PATH, 0o755)
            os.chown(self.TARGET, 1000, 1000)
            os.chown(self.PATH, 1000, 1000)
        self.XMLPATH = self.PATH + '/xml_nmap'
        if not os.path.exists(self.XMLPATH):
            os.makedirs(self.PATH + '/xml_nmap')
            os.chmod(self.TARGET, 0o755)
            os.chmod(self.PATH, 0o755)
            os.chown(self.TARGET, 1000, 1000)
            os.chown(self.PATH, 1000, 1000)

    def nmap_quick(self):
        self.bot_print_process('Starting NMAP TCP Quick scan')
        if self.PORTS:
            newports = self.get_command_output(f'nmap -sS -p {self.PORTS} -Pn --open -oN {self.PATH+"/nmap_quick"} -oX {self.XMLPATH+"/nmap_quick_xml"} {self.TARGET}', "NMAP Quick Scan", True)
        else:
            newports = self.get_command_output(f'nmap -sS -Pn --open -oN {self.PATH+"/nmap_quick"} {self.TARGET} -oX {self.XMLPATH+"/nmap_quick_xml"}', "NMAP Quick Scan", True)
        self.check_scripts("tcp")
        if newports != 0:
            self.nmap_detailed("NMAP TCP Quick detailed scan", True, "TCP", "Quick")

    def nmap_udp_quick(self):
        if not self.PORTS:
            self.bot_print_process('Starting NMAP UDP QUICK scan (top 20 ports)')
            newports = self.get_command_output(f'nmap --open -sU -Pn -oN {self.PATH+"/nmap_udp_top20ports"} -oX {self.XMLPATH+"/nmap_udp_top20ports_xml"} --top-ports=20 {self.TARGET}', "NMAP UDP QUICK scan", True)
            if newports != 0:
                self.nmap_detailed("NMAP UDP Quick detailed scan", False, "UDP", "Quick")

    def nmap_full(self):
        if not self.PORTS:
            self.bot_print_process('Starting NMAP TCP Full scan')
            newports = self.get_command_output(f'nmap --open -sS -Pn -p- -oN {self.PATH+"/nmap_full"} -oX {self.XMLPATH+"/nmap_full_xml"} {self.TARGET}', "NMAP Full Scan", True)
            self.check_scripts("tcp")
            if newports != 0:
                self.nmap_detailed("NMAP TCP Full detailed scan", True, "TCP", "Full")

    def nmap_udp_full(self):
        if not self.PORTS:
            self.bot_print_process('Starting NMAP UDP Top 50 scan')
            newports = self.get_command_output(f'nmap --open -sU -Pn -p- -oN {self.PATH+"/nmap_udp_top_200"} -oX {self.XMLPATH+"/nmap_udp_top_200_xml"} --top-ports=200 {self.TARGET}', "NMAP UDP Full Scan", True)
            if newports != 0:
                self.nmap_detailed("NMAP UDP Top 50 detailed scan", False, "UDP", "Full")

    def nmap_detailed(self, name, checkscripts, protocol, type):
        ports = ""
        for i in self.services:
            if protocol.lower() in i:
                ports += i.split('-')[0] + ','
        ports = ports[:-1]
        if protocol == "TCP":
            self.bot_print_process(f'Starting {name} scan on found {protocol} ports: {ports}')
            newports = self.get_command_output(f'nmap --open -Pn -sV -sC -p {ports} -oN {self.PATH+"/nmap_detailed_"+protocol+"_"+type} -oX {self.XMLPATH+"/nmap_detailed_"+protocol+"_"+type+"_xml"} {self.TARGET}', name, False)
        elif protocol == "UDP":
            self.bot_print_process(f'Starting {name} scan on UDP ports')
            newports = self.get_command_output(f'nmap --open -Pn -sU -sV -sC -p {ports} -oN {self.PATH+"/nmap_detailed_"+protocol+"_"+type} -oX {self.XMLPATH+"/nmap_detailed_"+protocol+"_"+type+"_xml"} {self.TARGET}', name, False)
        if checkscripts:
            self.check_scripts("tcp")

    def nmap_vulnscan(self):
        tcp_ports = ""
        udp_ports = ""
        for i in self.services:
            if "tcp" in i:
                tcp_ports += i.split('-')[0] + ','
            elif "udp" in i:
                udp_ports += i.split('-')[0] + ','

        tcp_ports = tcp_ports[:-1]
        udp_ports = udp_ports[:-1]
        if len(tcp_ports) > 1:
            tcp_vulnscan_thread = threading.Thread(target=self.nmap_vulnthread, args=[tcp_ports, "TCP"])
            tcp_vulnscan_thread.daemon = True
            tcp_vulnscan_thread.start()
            self.scriptthreads["NMAP Vuln TCP Scan"] = tcp_vulnscan_thread

        if len(udp_ports) > 1:
            udp_vulnscan_thread = threading.Thread(target=self.nmap_vulnthread, args=[udp_ports, "UDP"])
            udp_vulnscan_thread.daemon = True
            udp_vulnscan_thread.start()
            self.scriptthreads["NMAP Vuln UDP Scan"] = udp_vulnscan_thread

    def nmap_vulnthread(self, ports, type):
        self.bot_print_process(f'Starting NMAP VULN scan on found {type} ports: {ports}')
        if type == "TCP":
            newports = self.get_command_output(f'nmap --open -Pn --script vuln -p {ports} -oN {self.PATH + "/nmap_vuln_tcp"} -oX {self.XMLPATH+"/nmap_vuln_tcp_xml"} {self.TARGET}', "NMAP TCP Vuln Scan", False)
        elif type == "UDP":
            newports = self.get_command_output(f'nmap --open -Pn -sU --script vuln -p {ports} -oN {self.PATH + "/nmap_vuln_udp"} {self.TARGET} -oX {self.XMLPATH+"/nmap_vuln_tcp_xml"}', "NMAP UDP Vuln Scan", False)

    def nmap_process(self, output):
        output = output.split('\n')
        newportcounter = 0
        filtered_flag = False
        for line in output:
            if ("open" in line) and ("tcp" in line or "udp" in line) and "/" in line:
                if "filtered" not in line:
                    filtered_flag = False
                parts = line.split()
                protocol_port = parts[0].replace('/', '-')
                service = line # seperate by spaces tabs etc, and get the last item
                if protocol_port not in self.services.keys():
                    self.services[protocol_port] = service
                    newportcounter += 1
                else:
                    services = self.services[protocol_port].split('|')
                    if service not in services:
                        newservices = ('|'.join(services)) + '|' + service
                        self.services[protocol_port] = newservices
        return newportcounter

    def check_scripts(self, type):
        while True:
            try:
                if not self.NMAPONLY:
                    for protocol_port in self.services:
                        service = self.services[protocol_port]
                        services = service.split('|')
                        for serv in services:
                            for mapped_service in self.mapped_services:
                                servlist = serv.split()
                                cont = False
                                for part in servlist[:3]:
                                    if len(part) > 2 and mapped_service in part and type in protocol_port:
                                        cont = True
                                if cont:
                                    for script in self.mapped_services[mapped_service]:
                                        if ((self.BRUTEONLY) and ("hydra" in script)) or (not self.BRUTEONLY):
                                            shouldrun = True
                                            if script in self.blacklist_services:
                                                for blacklisted in self.blacklist_services[script]:
                                                    s = servlist[-1]
                                                    if s.startswith(blacklisted):
                                                        shouldrun = False
                                                        break
                                                if shouldrun:
                                                    self.start_script(protocol_port, script)
                                            else:
                                                self.start_script(protocol_port, script)
                break
            except RuntimeError:
                pass

    def start_script(self, protocol_port, script):
        port = int(protocol_port.split('-')[0])
        if script in self.runonce_commands:
            if script not in self.runningscripts:
                self.runningscripts.append(f"{script}")
                cmd = self.mapped_commands[script].replace("__IP__", self.TARGET).replace("__PORT__", str(port)).replace("__PATH__", self.PATH)
                if "hydra" in script:
                    self.bot_print_alert(f'Trying to bruteforce with {script}')
                else:
                    self.bot_print_process(f'Starting {script}')
                self.bot_print_done(f"\toutfile: {self.PATH}/{script}.txt")
                t = threading.Thread(target=self.run_cmd, args=[cmd, script, port])
                self.scriptthreads[script] = t
                self.scriptthreads[script].daemon = True
                self.scriptthreads[script].start()

        else:
            if f"{script}_{port}" not in self.runningscripts:
                self.runningscripts.append(f"{script}_{port}")
                cmd = self.mapped_commands[script].replace("__IP__", self.TARGET).replace("__PORT__", str(port)).replace("__PATH__", self.PATH)
                if "hydra" in script:
                    self.bot_print_alert(f'Trying to bruteforce with {script} on port {port}')
                else:
                    self.bot_print_process(f'Starting {script} on port {port}')
                self.bot_print_done(f"\toutfile: {self.PATH}/{script}_{port}.txt")
                t = threading.Thread(target=self.run_cmd, args=[cmd, script, port])
                self.scriptthreads[f"{script}_{port}"] = t
                self.scriptthreads[f"{script}_{port}"].daemon = True
                self.scriptthreads[f"{script}_{port}"].start()

    def get_command_output(self, cmd, name, printzerofound):
        try:
            newports = -1
            cmdl = cmd.split(' ')
            result = subprocess.check_output(cmdl).decode('utf-8')
            newports = self.nmap_process(result)
            self.print_command_output(result, name)
            if printzerofound and newports == 0:
                self.bot_print_alert(f"{name} did not find any new ports!")
            return newports
        except (KeyboardInterrupt, subprocess.CalledProcessError):
            pass

    def print_command_output(self, cmd_output, name):
        output = ""
        output += colored('-'*100, 'green') + '\n'
        output += colored(f'- {name}\n', 'green')
        output += colored('-'*100, 'green')
        output += f'\n{cmd_output}'
        output += colored('-'*100, 'green')
        self.bprint(output)

    def check_stopcode(self, threadname, stopcode):
        if not (self.scriptthreads[threadname].is_alive()):
            self.processor_stopcodes.remove(stopcode)
            return False
        return True

    def start_processor(self, script, threadname, process_file):
        try:
            stopcode = self.random(100)
            self.processor_stopcodes.append(stopcode)
            self.processor_info_parser(script)
            self.main_processor(process_file, stopcode, threadname, self.process_list[script])
        except KeyboardInterrupt:
            pass

    def processor_info_parser(self, script):
        if self.detail_list[script] not in self.reconbot_info:
            self.reconbot_info[self.detail_list[script]] = []

    def main_processor(self, process_file, stopcode, threadname, subprocess):
        dumped = []
        while True:
            time.sleep(0.5)
            if not self.check_stopcode(threadname, stopcode):
                break
            subprocess(process_file, dumped)

    def processor_hydra(self,  process_file, dumped):
        output = open(process_file)
        for line in output:
            if "host" in line:
                username = line.split(" login:")[1].split(' ')[1].strip()
                password = line.split(" password:")[1].split(' ')[1].strip()
                if username+password not in dumped:
                    dumped.append(username+password)
                    self.reconbot_info["Credentials"].append(f"{username}:{password}")
                    self.bot_print_finding(colored("Credentials", "red", attrs=['bold']) + colored(f" found in {process_file}: ", 'red') + colored(f"{username}", "green", attrs=['bold']) + colored(f":", "red") + colored(f"{password}\n", "green", attrs=['bold']))

    def processor_gobuster(self,  process_file, dumped):
        output = open(process_file)
        port = process_file.split('_')[-1].split('.txt')[0]
        type = 'http'
        if 'https' in process_file:
            type = 'https'
        for line in output:
            if "Status" in line and not "Status codes:" in line:
                path = '/'+line.split('/')[1].strip()
                if path not in dumped:
                    dumped.append(path)
                    self.reconbot_info["Paths"].append(f"[{process_file}] {path}")
                    if self.VERBOSE:
                        self.bot_print_finding(colored("Gobuster ", "green", attrs=['bold']) + colored(f"{path}", 'yellow', attrs=['bold']) + colored(f" \t\tFound on {self.TARGET}:{port}", "green"))
                    self.processor_htmlcomments(f"{type}://{self.TARGET}:{port}{path.split(' (Status:')[0]}")

    def processor_htmlcomments(self, url):
        outfile = open(f"{self.PATH}/CommentFinder.txt", 'a+')
        r = requests.get(url, verify=False)
        html = r.text
        soup = BeautifulSoup(html, 'lxml')
        comments = soup.findAll(text=lambda text: isinstance(text, Comment))
        if len(comments) > 0:
            outfile.write(f"{url}:\n")
            self.bot_print_finding(colored(f"CommentFinder", "green", attrs=['bold']) + colored(f"( {url} )", "green", attrs=['bold']))
        for comment in comments:
            outfile.write(f"{comment}\n")
            if self.VERBOSE:
                self.bprint(colored(f"<!-- {comment} -->", 'yellow', attrs=['bold']))
        if len(comments) > 0:
            outfile.write(f"\n")

    def run_cmd(self, cmd, script, port):
        try:
            if script in self.runonce_commands:
                threadname = script
                filename = f"{self.PATH}/{script}.txt"
                cmd_file = open(filename, "w+")
            else:
                threadname = f"{script}_{port}"
                filename = f"{self.PATH}/{script}_{port}.txt"
                cmd_file = open(filename, "w+")
            for process_script in self.processor_scripts:
                if process_script in script:
                    t = threading.Thread(target=self.start_processor, args=[process_script, threadname, filename])
                    t.daemon = True
                    t.start()
            subprocess.call(cmd, stdout=cmd_file, stderr=cmd_file, shell=True)
        except KeyboardInterrupt:
            self.bot_print_alert(f"Stopping {script}")

    def check_which(self):
        print("")
        for softwareName in self.which_checklist:
            if which(softwareName) is None:
                self.bot_print_alert(f"{softwareName} was not found! Please install for full use of reconbot")
        print("")


    def shutdown(self):
        self.logfile.close()

    def initial(self):
        self.check_which()
        # start tcp quick thread
        tcp_quick_thread = threading.Thread(target=self.nmap_quick)
        tcp_quick_thread.daemon = True
        tcp_quick_thread.start()
        self.scriptthreads["NMAP Quick / Detailed TCP Scan"] = tcp_quick_thread

        # start tcp full thread
        if not self.QUICK:
            tcp_full_thread = threading.Thread(target=self.nmap_full)
            tcp_full_thread.daemon = True
            tcp_full_thread.start()
            self.scriptthreads["NMAP Full TCP / Detailed Scan"] = tcp_full_thread

        # start udp quick thread
        udp_quick_thread = threading.Thread(target=self.nmap_udp_quick)
        udp_quick_thread.daemon = True
        udp_quick_thread.start()
        self.scriptthreads["NMAP Quick UDP / Detailed Scan"] = udp_quick_thread

        # start udp full thread
        if not self.QUICK:
            udp_full_thread = threading.Thread(target=self.nmap_udp_full)
            udp_full_thread.daemon = True
            udp_full_thread.start()
            self.scriptthreads["NMAP Full UDP / Detailed Scan"] = udp_full_thread

        vulnscan = True
        while vulnscan: # we wait untill the quick tcp scan, the full tcp scan and the quick udp scans are finished to start a vuln scan, udp full scans take way too long to wait for this.
            if not self.QUICK:
                if not tcp_quick_thread.is_alive() and not tcp_full_thread.is_alive() and not udp_quick_thread.is_alive():
                    self.nmap_vulnscan()
                    vulnscan = False
            else:
                if not tcp_quick_thread.is_alive() and not udp_quick_thread.is_alive():
                    self.nmap_vulnscan()
                    vulnscan = False



def main(): 

    example = "\nEXAMPLES\n\n"
    example += "reconbot 1.1.1.1                                                                        # Full recon scan of target\n"
    example += "reconbot -HF ./hosts                                                                    # Full recon scan of targets in file\n"
    example += "reconbot 1.1.1.1 -p 80,443                                                              # Recon scan of target only scanning port 80\n"
    example += "reconbot 1.1.1.1 -w /usr/share/wordlist/webfiles.txt                                    # Full recon scan of target using custom web directory bruteforce wordlist\n"
    example += "reconbot 1.1.1.1 -U /wordlist/usernames.txt -P /wordlist/passwords.txt                  # Full recon scan of target using custom username and password wordlists\n"
    example += "reconbot 1.1.1.1 --nmaponly                                                             # Nmap only scan of target\n"
    example += "reconbot 1.1.1.1 --nmaponly --quick                                                     # Nmap only scan of target only using quick scans\n"
    example += "reconbot 1.1.1.1 -p 22,21 --bruteonly --quick -P /wordlist/passwords.txt                # Bruteforce only scan of target only using quick nmap scans to discover ports\n\n"

    parser = parser = argparse.ArgumentParser(prog="Reconbot",description="Automated Reconnaissance Bot", epilog=example, formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument("host", metavar='',  nargs='?', help="Target")
    parser.add_argument("-HF", "--hostfile", metavar='',  help="File containing targets to scan")
    parser.add_argument("-p", "--ports", metavar='',  help="Ports to scan")
    parser.add_argument("-U", "--userlist", metavar='',  help="Wordlist to use for usernames when bruteforcing")
    parser.add_argument("-P", "--passlist", metavar='',  help="Wordlist to use for passwords when bruteforcing")
    parser.add_argument("-w", "--weblist", metavar='',  help="Wordlist to use for web directory bruteforcing")
    parser.add_argument("--nmaponly", action='store_true', default=False,  help="Only activate the nmap scripts")
    parser.add_argument("--quick", action='store_true', default=False,  help="Only activate quick port scanning")
    parser.add_argument("--bruteonly", action='store_true', default=False,  help="Only activate the hydra bruteforcing scripts")
    parser.add_argument("--verbose", action='store_true', default=False,  help="Display extra output in the reconbot output (things like paths gobuster finds)")
    args = parser.parse_args()
    TARGET = False

    if args.host != None:
        TARGET = args.host
    elif args.hostfile != None:
        try:
            TARGETFILE = open(args.hostfile).read().split()
        except:
            print(colored('[', 'white', attrs=['bold']) + colored('!', 'red', attrs=['bold']) + colored('] ', 'white',attrs=['bold']) + colored(f"No file found called {args.hostfile}", 'red'))
            sys.exit()
    else:
        print(colored('[', 'white', attrs=['bold']) + colored('!', 'red', attrs=['bold']) + colored('] ', 'white', attrs=['bold']) + colored(f"Please supply target or targetfile (use reconbot -h for usage)", 'red'))
        sys.exit()


    if TARGET:
        try:
            rbot = reconbot(args, TARGET)
            rbot.run()
        except KeyboardInterrupt:
            rbot.shutdown()
            rbot.bot_print_alert("Keyboard Interrupt found, stopping reconbot! (If your terminal is broken after reconbot has terminated, run the 'stty sane' command)")
            sys.exit()
    else:
        try:
            for TARGET in TARGETFILE:
                rbot = reconbot(args, TARGET.strip())
                rbot.run()
        except KeyboardInterrupt:
            rbot.shutdown()
            rbot.bot_print_alert("Keyboard Interrupt found, stopping reconbot! (If your terminal is broken after reconbot has terminated, run the 'stty sane' command)")
            sys.exit()

if __name__ == "__main__":
    main()
